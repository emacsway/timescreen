#!/bin/bash
START_DATE=`date "+%d.%m.%Y %H:%M:%S"`
PROJECT=${1:-'default'}
MAX_WIDTH=${TIMESCREEN_MAX_WIDTH:-800}
QUALITY=${TIMESCREEN_QUALITY:-85}
DATA_ROOT=${TIMESCREEN_DATA_ROOT:-~/timescreens}
INTERVAL=${TIMESCREEN_INTERVAL:-300}
ALERT_INTERVAL=${TIMESCREEN_ALERT_INTERVAL:-12}
BIN_SOURCE=$(python -c 'import sys,os; print(os.path.realpath(sys.argv[1]))' "${BASH_SOURCE}")
BIN_ROOT=`dirname "${BIN_SOURCE}"`
APP_ROOT=`dirname "${BIN_ROOT}"`
SOUNDS_ROOT="${APP_ROOT}/var/sounds"
SOUND_BEFORE="${SOUNDS_ROOT}/KDE-Im-Sms.ogg"
SOUND_ON="${SOUNDS_ROOT}/sonar.ogg"
LOG_ROOT=$(date +"${DATA_ROOT}/${PROJECT}/%Y/%m")
LOG_FILE="${LOG_ROOT}/timelog.${PROJECT}."$(date "+%Y.%m.tsv")
LOG_BACKUP_FILE="${LOG_FILE}.bak"
IMG_ROOT="$(date +$DATA_ROOT/$PROJECT/%Y/%m/%d)"
DEFAULT_COMMENT=""

TOMATO_DURATION=${TIMESCREEN_TOMATO_DURATION:-1500}
TOMATO_BREAK_DURATION=${TIMESCREEN_TOMATO_BREAK_DURATION:-300}

pause_start_timestamp=0
pause_amount=0

tomato_start_timestamp=$(date +%s)
tomato_count=0

# Debugging:
# INTERVAL=20
# TOMATO_DURATION=60
# TOMATO_BREAK_DURATION=40


if [ -f "${LOG_BACKUP_FILE}" ]; then
    echo "There is exists backup file:"
    echo "${LOG_BACKUP_FILE}"
    echo "Probably, another instance of this program is already running for the project \"${PROJECT}\","
    echo "or last time has been failed. Check the backup with log file:"
    echo "${LOG_FILE}"
    echo "and then remove the backup file."
    exit 0
fi


echo "Process ID: $$"
echo "Started at: ${START_DATE}"
mkdir -p `dirname "${LOG_FILE}"`
touch "${LOG_FILE}"
cp -a "${LOG_FILE}" "${LOG_BACKUP_FILE}"
LINE_PLACEHOLDER=$(echo -en "__${START_DATE}")
echo -en "${LINE_PLACEHOLDER}" >> "${LOG_FILE}"


trap ctrl_c INT
# trap pause SIGTSTP
# trap resume SIGCONT


function repl() { for ((i=1; i<=$2; i++)); do echo -n $1; done }


function gui_msg() {  # txt, duration
    local timeout=3000
    if [[ -n $2 ]]
    then
        timeout=$2
    fi
    pkill notify-osd
    notify-send "$1" -t $timeout
    # timeout $(($timeout/1000)) zenity --info text="$1"
    # nohup timeout $(($timeout/1000)) xmessage -center "$1" >/dev/null 2>&1 &
}


function sound() {  # path
    nohup mplayer "$1" >/dev/null 2>&1 &
}


function tomato() {
    local current_timestamp=$(date +%s)
    local passed=$((${current_timestamp} - ${tomato_start_timestamp}))
    if [ ${passed} -lt ${TOMATO_DURATION} ]
    then
        tomato_progress_msg "${tomato_start_timestamp}"  "${current_timestamp}" "${TOMATO_DURATION}" "${tomato_count}"
    elif [ ${passed} -lt $((${TOMATO_DURATION} + ${TOMATO_BREAK_DURATION})) ]
    then
        tomato_break_msg $((${tomato_start_timestamp} + ${TOMATO_DURATION})) "${current_timestamp}" "${TOMATO_BREAK_DURATION}"
    else
        tomato_start_timestamp=${current_timestamp}
        tomato_count=$((${tomato_count} + 1))
        tomato_progress_msg "${tomato_start_timestamp}" "${current_timestamp}" "${TOMATO_DURATION}" "${tomato_count}"
    fi
}


function tomato_progress_msg() {  # tomato_start_timestamp, current_timestamp, duration, tomato_count
    local display_length=20
    local start_timestamp="$1"
    local current_timestamp="$2"
    local duration="$3"
    local tomato_count="$4"
    local spent_seconds=$((${current_timestamp} - ${start_timestamp}))
    local spent_ratio=$((${spent_seconds}*100/${duration}))
    local spent_units=$((${spent_ratio}*${display_length}/100))
    local rest_units=$((${display_length} - ${spent_units}))
    echo -n "Tomato: "${spent_ratio}"% of "$((${tomato_count} + 1))" "$(date -d@${start_timestamp} "+%H:%M:%S")" ["$(repl = ${spent_units})">"$(repl - ${rest_units})"] "$(date -d@${spent_seconds} -u "+%H:%M:%S")
}


function tomato_break_msg() {  # break_start_timestamp, current_timestamp,  break_duration
    local display_length=10
    local break_start_timestamp="$1"
    local current_timestamp="$2"
    local duration="$3"
    local spent_seconds=$((${current_timestamp} - ${break_start_timestamp}))
    local spent_ratio=$((${spent_seconds}*100/${duration}))
    local spent_units=$((${spent_ratio}*${display_length}/100))
    local rest_units=$((${display_length} - ${spent_units}))
    echo -n "Break: "${spent_ratio}"% "$(date -d@${break_start_timestamp} "+%H:%M:%S")" ["$(repl = ${spent_units})">"$(repl - ${rest_units})"] "$(date -d@${spent_seconds} -u "+%H:%M:%S")
}


function re_escape() {
    python -c 'import sys, os, re; reload(sys); sys.setdefaultencoding("UTF-8"); print(re.escape(sys.argv[1].decode("utf-8")));' "$1";
}


function re_replace() { # file_name, from_str, to_str
    python -c 'import sys, os, re; reload(sys); sys.setdefaultencoding("UTF-8"); f = open(sys.argv[1].decode("utf-8"), "r+"); s = re.sub(sys.argv[2].decode("utf-8"), sys.argv[3].decode("utf-8"), open(sys.argv[1].decode("utf-8")).read().decode("utf-8"), flags=re.M|re.U); f.truncate(); f.write(s); f.close();' "$1" "$2" "$3";
}


function replace() { # file_name, from_str, to_str
    python -c 'import sys,os; reload(sys); sys.setdefaultencoding("UTF-8"); f = open(sys.argv[1].decode("utf-8"), "r+"); s = open(sys.argv[1].decode("utf-8")).read().decode("utf-8").replace(sys.argv[2].decode("utf-8"), sys.argv[3].decode("utf-8")); f.truncate(); f.write(s); f.close();' "$1" "$2" "$3";
}


function screen() {
    mkdir -p "${IMG_ROOT}"
    cd "${IMG_ROOT}"
    local filename=`date "+%d.%m.%Y %H:%M:%S.jpg"`
    DISPLAY=:0 scrot "$filename"
    convert "$filename" -resize ${MAX_WIDTH} -quality ${QUALITY} "${filename}"
}


function pause() {
    pause_start_timestamp=$(date +%s)
    local pause_start_date=$(date -d@${pause_start_timestamp} "+%d.%m.%Y %H:%M:%S")
    echo -en "\t${pause_start_date}" >> "${LOG_FILE}"
    if [ -n "${DEFAULT_COMMENT}" ]
    then
        DEFAULT_COMMENT="${DEFAULT_COMMENT}, "
    fi
    DEFAULT_COMMENT="${DEFAULT_COMMENT}Pause: ${pause_start_date}"
    echo "paused at: ${pause_start_date}"
}


function resume() {
    local resume_timestamp=$(date +%s)
    local resume_date=$(date -d@${resume_timestamp} "+%d.%m.%Y %H:%M:%S")
    local pause_duration_seconds=$((${resume_timestamp} - ${pause_start_timestamp}))
    local pause_duration_time=$(convertsecs ${pause_duration_seconds})
    echo -en " - ${resume_date} = -${pause_duration_time}" >> "${LOG_FILE}"
    DEFAULT_COMMENT="${DEFAULT_COMMENT} - ${resume_date} = -${pause_duration_time}"
    echo "resumed at: ${resume_date}, pause duration: ${pause_duration_time}"
    pause_amount=$((${pause_amount} + ${pause_duration_seconds}))
    tomato_start_timestamp=$((${tomato_start_timestamp} + ${pause_duration_seconds}))
    pause_start_timestamp=0
}


function ctrl_c() {
    echo ""
    read -p "Do you want pause? [Y/n]:" DO_PAUSE
    if [[ "${DO_PAUSE}" == "Y" ]]
    then
        pause
        echo "Press any key to continue"
        read -rsn1
        resume
        return
    fi

    read -p "Ticket number: " TICKET_NUMBER
    if [ "${TICKET_NUMBER}" != "0" -a -n "${TICKET_NUMBER}" ]
    then
        TICKET_TITLE=`grep -P -o -m 1 "(?<=^${PROJECT}\t${TICKET_NUMBER}\t)([^\t]+)(?=\t)" "${LOG_FILE}"`
    else
        TICKET_TITLE=""
    fi
    if [ -n "${TICKET_TITLE}" ]
    then
        echo "Found ticket title: \"${TICKET_TITLE}\""
    else
        read -p "Ticket title: " TICKET_TITLE
    fi
    read -e -p "Comment: " -i "${DEFAULT_COMMENT}" COMMENT
    read -p "Commit revision: " COMMIT

    DEFAULT_IDLE=$(convertsecs ${pause_amount})
    read -e -p "Idle time, for example 01:00:00: " -i "${DEFAULT_IDLE}" IDLE
    echo "Idle time: \"${IDLE}\""

    mkdir -p "${LOG_ROOT}"
    END_DATE=`date "+%d.%m.%Y %H:%M:%S"`
    DATA=$(echo -e "${PROJECT}\t${TICKET_NUMBER}\t${TICKET_TITLE}\t${START_DATE}\t${END_DATE}\t${IDLE}\t\t\t\t\t${COMMIT}\t${COMMENT}")
    ESPAPEN_LINE_PLACEHOLDER=$(re_escape "${LINE_PLACEHOLDER}")
    re_replace "${LOG_FILE}" "${ESPAPEN_LINE_PLACEHOLDER}[^\n]*" "${DATA}"
    echo "" >> "${LOG_FILE}"  # New line
    echo -e "Start / End date: ${START_DATE}\t${END_DATE}"
    screen
    gui_msg "SAVED!" 1000
    sound "${SOUND_ON}"
    echo "${LOG_FILE}"
    tail -n 3 "${LOG_FILE}"

    if [ $(($(cat "${LOG_BACKUP_FILE}"|wc -l) + 1)) -ne $(cat "${LOG_FILE}"|wc -l) ]; then
        echo ""
        printf '=%.0s' {1..100}
        echo ""
        echo "ERROR DETECTED!!!"
        echo -e "Check ${LOG_FILE}\nwith backup ${LOG_BACKUP_FILE}"
        printf '=%.0s' {1..100}
        echo ""
        exit 1
    else
        rm "${LOG_BACKUP_FILE}"
        gedit "${LOG_FILE}"  +$(cat "${LOG_FILE}"| wc -l)
        exit 0
    fi
}


convertsecs() {
    h=$(bc <<< "${1}/3600")
    m=$(bc <<< "(${1}%3600)/60")
    s=$(bc <<< "${1}%60")
    printf "%02d:%02d:%02d\n" $h $m $s
}


main_loop() {
    tomato_start_timestamp=$(date +%s)
    while true
    do
        stdbuf -i0 -o0 -e0 echo -en "\r\033[K"$(date "+%d.%m.%Y %H:%M:%S")" "

        screen

        local tomato_msg=$(tomato)
        if [[ ${tomato_msg:0:7} == "Tomato:" ]]
        then
            stdbuf -i0 -o0 -e0 echo -en "\033[0;32m${tomato_msg}\033[0m"
            gui_msg "${tomato_msg}"
        else
            stdbuf -i0 -o0 -e0 echo -en "\033[0;31m${tomato_msg}\033[0m"
            gui_msg "${tomato_msg}"
        fi

        sound "${SOUND_ON}"
        sleep $((${INTERVAL} - ${ALERT_INTERVAL}))
        sound "${SOUND_BEFORE}"
        gui_msg "Screen will be saved in ${ALERT_INTERVAL} sec." 1000
        sleep ${ALERT_INTERVAL}
        # for i in $(seq ${ALERT_INTERVAL} -1 1);
        # do
        #     gui_msg "Screen will be saved in ${i} sec." 1000
        #     sleep 1
        # done
    done
}

screen
gui_msg "SAVED!" 1000
sound "${SOUND_ON}"
sleep 15
main_loop
