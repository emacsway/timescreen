#!/bin/bash
START_DATE=`date "+%d.%m.%Y %H:%M:%S"`
PROJECT=${1:-'default'}
MAX_WIDTH=${TIMESCREEN_MAX_WIDTH:-800}
QUALITY=${TIMESCREEN_QUALITY:-85}
DATA_ROOT=${TIMESCREEN_DATA_ROOT:-~/timescreens}
INTERVAL=${TIMESCREEN_INTERVAL:-300}
ALERT_INTERVAL=${TIMESCREEN_ALERT_INTERVAL:-12}
BIN_SOURCE=$(python -c 'import sys,os; print os.path.realpath(sys.argv[1])' $BASH_SOURCE)
BIN_ROOT=`dirname $BIN_SOURCE`
APP_ROOT=`dirname $BIN_ROOT`
SOUNDS_ROOT=$APP_ROOT/var/sounds
SOUND_BEFORE=$SOUNDS_ROOT/KDE-Im-Sms.ogg
SOUND_ON=$SOUNDS_ROOT/sonar.ogg
LOG_ROOT="$(date +$DATA_ROOT/$PROJECT/%Y/%m)"
LOG_FILE=$LOG_ROOT/timelog.$PROJECT.`date "+%Y.%m.tsv"`

echo "Start at: $START_DATE"

trap ctrl_c INT


function screen() {
    dir="$(date +$DATA_ROOT/$PROJECT/%Y/%m/%d)"
    mkdir -p $dir
    cd $dir
    filename=`date "+%d.%m.%Y %H:%M:%S.jpg"`
    DISPLAY=:0 scrot "$filename"
    convert "$filename" -resize $MAX_WIDTH -quality $QUALITY "$filename"
    pkill notify-osd
    notify-send "SAVED!"
    nohup mplayer "$SOUND_ON" >/dev/null 2>&1 &
}


function ctrl_c() {
    echo "Ticket number:"
    read TICKET_NUMBER
    if [ "$TICKET_NUMBER" != "0" -a -n "$TICKET_NUMBER" ]
    then
        TICKET_TITLE=`grep -P -o -m 1 "(?<=^$TICKET_NUMBER\t$PROJECT\t)([^\t]+)(?=\t)" $LOG_FILE`
    else
        TICKET_TITLE=""
    fi
    if [ -n "$TICKET_TITLE" ]
    then
        echo "Found ticket title: \"$TICKET_TITLE\""
    else
        echo "Ticket title:"
        read TICKET_TITLE
    fi
    echo "Comment:"
    read COMMENT
    echo "Commit revision:"
    read COMMIT
    mkdir -p $LOG_ROOT
    END_DATE=`date "+%d.%m.%Y %H:%M:%S"`
    echo -e "$TICKET_NUMBER\t$PROJECT\t$TICKET_TITLE\t$START_DATE\t$END_DATE\t\t\t\t\t\t$COMMIT\t$COMMENT" >> $LOG_FILE
    echo -e "Start / End date: $START_DATE\t$END_DATE"
    screen
    tail -n 3 $LOG_FILE
    gedit $LOG_FILE
    exit 1;
}

screen
sleep 20
while true
do
    echo `date "+%d.%m.%Y %H:%M:%S"`
    screen
    sleep $(($INTERVAL - $ALERT_INTERVAL))
    nohup mplayer "$SOUND_BEFORE" >/dev/null 2>&1 &
    for i in `seq $ALERT_INTERVAL -1 1`;
    do
        notify-send -t 1000 "Screen will be saved in $i sec."
        sleep 1
        pkill notify-osd
    done
done
