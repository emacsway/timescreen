#!/bin/bash
START_DATE=`date "+%d.%m.%Y %H:%M:%S"`
PROJECT=${1:-'default'}
MAX_WIDTH=${TIMESCREEN_MAX_WIDTH:-800}
QUALITY=${TIMESCREEN_QUALITY:-85}
DATA_ROOT=${TIMESCREEN_DATA_ROOT:-~/timescreens}
INTERVAL=${TIMESCREEN_INTERVAL:-300}
ALERT_INTERVAL=${TIMESCREEN_ALERT_INTERVAL:-12}
BIN_SOURCE=$(python -c 'import sys,os; print os.path.realpath(sys.argv[1])' "${BASH_SOURCE}")
BIN_ROOT=`dirname "${BIN_SOURCE}"`
APP_ROOT=`dirname "${BIN_ROOT}"`
SOUNDS_ROOT="${APP_ROOT}/var/sounds"
SOUND_BEFORE="${SOUNDS_ROOT}/KDE-Im-Sms.ogg"
SOUND_ON="${SOUNDS_ROOT}/sonar.ogg"
LOG_ROOT=$(date +"${DATA_ROOT}/${PROJECT}/%Y/%m")
LOG_FILE="${LOG_ROOT}/timelog.${PROJECT}."$(date "+%Y.%m.tsv")
LOG_BACKUP_FILE="${LOG_FILE}.bak"
IMG_ROOT="$(date +$DATA_ROOT/$PROJECT/%Y/%m/%d)"

TOMATO_DURATION=${TIMESCREEN_TOMATO_DURATION:-1500}
TOMATO_BREAK_DURATION=${TIMESCREEN_TOMATO_BREAK_DURATION:-300}

pause_start_timestamp=0
pause_amount=0

tomato_start_timestamp=$(date +%s)
tomato_count=0

# Debugging:
# INTERVAL=20
# TOMATO_DURATION=60
# TOMATO_BREAK_DURATION=40


if [ -f "${LOG_BACKUP_FILE}" ]; then
    echo "There is exists backup file:"
    echo "${LOG_BACKUP_FILE}"
    echo "Probably, another instance of this program is already running for the project \"${PROJECT}\","
    echo "or last time has been failed. Check the backup with log file:"
    echo "${LOG_FILE}"
    echo "and then remove the backup file."
    exit 0
fi


echo "Process ID: $$"
echo "Started at: ${START_DATE}"
mkdir -p `dirname "${LOG_FILE}"`
touch "${LOG_FILE}"
cp -a "${LOG_FILE}" "${LOG_BACKUP_FILE}"
LINE_PLACEHOLDER=$(echo -e "__${START_DATE}")
echo -e "${LINE_PLACEHOLDER}" >> "${LOG_FILE}"


trap ctrl_c INT
# trap pause SIGTSTP
# trap resume SIGCONT


function repl() { for ((i=1; i<=$2; i++)); do echo -n $1; done }


function gui_msg() {  # txt, duration
    local timeout=3000
    if [[ -n $2 ]]
    then
        timeout=$2
    fi
    pkill notify-osd
    notify-send "$1" -t $timeout
    # timeout $(($timeout/1000)) zenity --info text="$1"
    # nohup timeout $(($timeout/1000)) xmessage -center "$1" >/dev/null 2>&1 &
}


function sound() {  # path
    nohup mplayer "$1" >/dev/null 2>&1 &
}


function tomato() {
    local passed=$(($(date +%s) - ${tomato_start_timestamp}))
    if [ ${passed} -lt ${TOMATO_DURATION} ]
    then
        show_tomato_progress
    elif [ ${passed} -lt $((${TOMATO_DURATION} + ${TOMATO_BREAK_DURATION})) ]
    then
        show_tomato_break
    else
        tomato_start_timestamp=$(date +%s)
        tomato_count=$((${tomato_count} + 1))
        show_tomato_progress
    fi
}


function show_tomato_progress() {
    local display_length=25
    local duration=${TOMATO_DURATION}
    local start_time=${tomato_start_timestamp}
    local spent_time=$(($(date +%s) - ${start_time}))
    local spent_ratio=$((${spent_time}*100/${duration}))
    local spent_units=$((${spent_ratio}*${display_length}/100))
    local rest_units=$((${display_length} - ${spent_units}))
    local txt="Tomato: "${spent_ratio}"% of "$((${tomato_count} + 1))" "$(date -d@${start_time} "+%H:%M:%S")" ["$(repl = ${spent_units})">"$(repl - ${rest_units})"] "$(date -d@${spent_time} -u "+%H:%M:%S")
    stdbuf -i0 -o0 -e0 echo -en "\033[0;32m${txt}\033[0m"
    gui_msg "${txt}"
}


function show_tomato_break() {
    local display_length=10
    local duration=${TOMATO_BREAK_DURATION}
    local start_time=$((${tomato_start_timestamp} + ${TOMATO_DURATION}))
    local spent_time=$(($(date +%s) - ${start_time}))
    local spent_ratio=$((${spent_time}*100/${duration}))
    local spent_units=$((${spent_ratio}*${display_length}/100))
    local rest_units=$((${display_length} - ${spent_units}))
    local txt="Break: "${spent_ratio}"% "$(date -d@${start_time} "+%H:%M:%S")" ["$(repl = ${spent_units})">"$(repl - ${rest_units})"] "$(date -d@${spent_time} -u "+%H:%M:%S")
    stdbuf -i0 -o0 -e0 echo -en "\033[0;31m${txt}\033[0m"
    gui_msg "${txt}"
}


function replace() { # file_name, from_str, to_str
    python -c 'import sys,os; reload(sys); sys.setdefaultencoding("UTF-8"); f = open(sys.argv[1].decode("utf-8"), "r+"); s = open(sys.argv[1].decode("utf-8")).read().decode("utf-8").replace(sys.argv[2].decode("utf-8"), sys.argv[3].decode("utf-8")); f.truncate(); f.write(s); f.close();' "$1" "$2" "$3";
}


function screen() {
    mkdir -p "${IMG_ROOT}"
    cd "${IMG_ROOT}"
    filename=`date "+%d.%m.%Y %H:%M:%S.jpg"`
    DISPLAY=:0 scrot "$filename"
    convert "$filename" -resize ${MAX_WIDTH} -quality ${QUALITY} "${filename}"
}


function pause() {
    pause_start_timestamp=$(date +%s)
    echo "paused at: " $(date -d@${pause_start_timestamp} "+%d.%m.%Y %H:%M:%S")
}


function resume() {
    pause_duration=$(($(date +%s) - ${pause_start_timestamp}))
    echo "resumed at: " $(date "+%d.%m.%Y %H:%M:%S") ", pause duration: " $(convertsecs ${pause_duration})
    pause_amount=$((${pause_amount} + ${pause_duration}))
    tomato_start_timestamp=$((${tomato_start_timestamp} + ${pause_duration}))
    pause_start_timestamp=0
}


function ctrl_c() {
    echo ""
    read -p "Do you want pause? [Y/n]:" DO_PAUSE
    if [[ "${DO_PAUSE}" == "Y" ]]
    then
        pause
        echo "Press any key to continue"
        read -rsn1
        resume
        return
    fi

    read -p "Ticket number: " TICKET_NUMBER
    if [ "${TICKET_NUMBER}" != "0" -a -n "${TICKET_NUMBER}" ]
    then
        TICKET_TITLE=`grep -P -o -m 1 "(?<=^${PROJECT}\t${TICKET_NUMBER}\t)([^\t]+)(?=\t)" "${LOG_FILE}"`
    else
        TICKET_TITLE=""
    fi
    if [ -n "${TICKET_TITLE}" ]
    then
        echo "Found ticket title: \"${TICKET_TITLE}\""
    else
        read -p "Ticket title: " TICKET_TITLE
    fi
    read -p "Comment: " COMMENT
    read -p "Commit revision: " COMMIT

    DEFAULT_IDLE=$(convertsecs ${pause_amount})
    read -e -p "Idle time, for example 01:00:00: " -i "${DEFAULT_IDLE}" IDLE
    echo "Idle time: \"${IDLE}\""

    mkdir -p "${LOG_ROOT}"
    END_DATE=`date "+%d.%m.%Y %H:%M:%S"`
    DATA=$(echo -e "${PROJECT}\t${TICKET_NUMBER}\t${TICKET_TITLE}\t${START_DATE}\t${END_DATE}\t${IDLE}\t\t\t\t\t${COMMIT}\t${COMMENT}")
    replace "${LOG_FILE}" "${LINE_PLACEHOLDER}" "${DATA}"
    echo -e "Start / End date: ${START_DATE}\t${END_DATE}"
    screen
    gui_msg "SAVED!" 1000
    sound "${SOUND_ON}"
    echo "${LOG_FILE}"
    tail -n 3 "${LOG_FILE}"

    if [ $(($(cat "${LOG_BACKUP_FILE}"|wc -l) + 1)) -ne $(cat "${LOG_FILE}"|wc -l) ]; then
        echo ""
        printf '=%.0s' {1..100}
        echo ""
        echo "ERROR DETECTED!!!"
        echo -e "Check ${LOG_FILE}\nwith backup ${LOG_BACKUP_FILE}"
        printf '=%.0s' {1..100}
        echo ""
        exit 1
    else
        rm "${LOG_BACKUP_FILE}"
        gedit "${LOG_FILE}"  +$(cat "${LOG_FILE}"| wc -l)
        exit 0
    fi
}


convertsecs() {
    h=$(bc <<< "${1}/3600")
    m=$(bc <<< "(${1}%3600)/60")
    s=$(bc <<< "${1}%60")
    printf "%02d:%02d:%02d\n" $h $m $s
}


main_loop() {
    tomato_start_timestamp=$(date +%s)
    while true
    do
        stdbuf -i0 -o0 -e0 echo -en "\r\033[K"$(date "+%d.%m.%Y %H:%M:%S")" "
        screen
        tomato
        sound "${SOUND_ON}"
        sleep $((${INTERVAL} - ${ALERT_INTERVAL}))
        sound "${SOUND_BEFORE}"
        gui_msg "Screen will be saved in ${ALERT_INTERVAL} sec." 1000
        sleep ${ALERT_INTERVAL}
        # for i in $(seq ${ALERT_INTERVAL} -1 1);
        # do
        #     gui_msg "Screen will be saved in ${i} sec." 1000
        #     sleep 1
        # done
    done
}

screen
gui_msg "SAVED!" 1000
sound "${SOUND_ON}"
sleep 15
main_loop
